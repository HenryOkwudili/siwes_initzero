// -------------------------------------
// WARNING
// THIS FILE IS AUTOGENERATED BY PRISMERGE
// DO NOT MANUALLY EDIT THIS FILE!
// -------------------------------------

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  STUDENT
  ADMIN
  LECTURER
  BUSINESS_OWNER
  SCHOOL
}

model Account {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type           AccountType
  users          User[]
  student        Student?
  school         School?
  admin          Admin?
  lecturer       Lecturer?
  business_owner BusinessOwner?

  @@index([type])
}

model Admin {
  accountId Int      @id
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  lastName  String
  firstName String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusinessOwner {
  accountId   Int      @id
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  lastName    String
  firstName   String
  email       String
  phone       String
  companyName String
  bio         String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lecturer {
  accountId Int              @id
  account   Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  lastName  String
  firstName String
  position  String
  bio       String?          @db.Text
  email     String
  schoolId  Int
  school    School           @relation(fields: [schoolId], references: [accountId])
  courses   CourseLecturer[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum Level {
  HUNDRED
  TWOHUNDRED
  THREEHUNDRED
  FOURHUNDRED
  FIVEHUNDRED
  JSSONE
  JSSTWO
  JSSTHREE
  SSONE
  SSTWO
  SSTHREE
}

enum Sex {
  MALE
  FEMALE
  BINARY
}

enum StudentType {
  SECONDARY
  TERTIARY
}


model Student {
  accountId         Int               @id
  account           Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  lastName          String
  firstName         String
  localGovernment   String
  stateOfOrigin     String
  sex               Sex
  bio               String?           @db.Text
  phone             String
  email             String
  facultyId         Int?
  departmentId      Int?
  schoolId          Int
  school            School            @relation(fields: [schoolId], references: [accountId])
  courses           CourseStudent[]
  studentAttendance ClassAttendance[]
  level             Level
  yearOfAdmission   Int
  matricNumber      String
  dateOfBirth       DateTime          @db.Date
  guardianFullName  String?
  linkedinUrl       String?
  facebookUrl       String?
  xUrl              String?
  passport          String?
  studentType       StudentType       @default(TERTIARY)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code      String  @unique()
  accountId Int
  completed Boolean @default(false)
}

model ClassAttendance {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classId   Int
  class     CourseClass @relation(fields: [classId], references: [id])
  studentId Int
  student   Student     @relation(fields: [studentId], references: [accountId])
  attended  Boolean     @default(false)
}

model CourseClass {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId        Int
  course          Course            @relation(fields: [courseId], references: [id])
  startTime       DateTime
  endTime         DateTime
  day             String
  classAttendance ClassAttendance[]
}

model CourseLecturer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId   Int
  course     Course   @relation(fields: [courseId], references: [id])
  lecturerId Int
  lecturer   Lecturer @relation(fields: [lecturerId], references: [accountId])
}

model CourseStudent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId  Int
  course    Course  @relation(fields: [courseId], references: [id])
  studentId Int
  student   Student @relation(fields: [studentId], references: [accountId])
}

model Course {
  code      String           @unique
  title     String
  level     Level            @default(HUNDRED)
  students  CourseStudent[]
  classes   CourseClass[]
  lecturer  CourseLecturer[]
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Department {
  name      String   @unique
  slug      String
  facultyId String
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faculty {
  name         String   @unique
  slug         String
  departmentId String
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum SchoolType {
  SECONDARY
  TERTIARY
}


model School {
  accountId   Int        @id
  account     Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  name        String     @unique
  regCode     String     @unique
  address     String
  email       String
  phoneNumber String
  bio         String?    @db.Text
  logo        String?
  students    Student[]
  lecturers   Lecturer[]
  status      Boolean    @default(false)
  schoolType  SchoolType @default(TERTIARY)
}

model EmailTemplate {
  subject   String
  title     String
  slug      String   @unique()
  body      String   @db.Text
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName       String
  lastName        String
  email           String    @unique
  password        String
  isFirstLogin    Boolean?  @default(false)
  lastLogin       DateTime?
  deletedAt       DateTime?
  hashedRt        String?
  isActivated     Boolean?  @default(false)
  isTermsAccepted Boolean?  @default(false)
  accounts        Account[]

  @@index([email, firstName, lastName])
}